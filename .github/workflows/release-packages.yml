name: release-packages

on:
  workflow_dispatch:
  push:
    tags:
      - Nikki-*

jobs:
  release:
    name: ${{ matrix.arch }}-${{ matrix.branch }} release
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        arch:
          - aarch64_cortex-a53
          - mipsel_24kc
        branch:
          - openwrt-23.05

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: extract version and create tag
        id: version
        run: |
          # 指定Makefile的准确路径
          MAKEFILE_PATH="nikki/Makefile"
          
          # 如果指定路径不存在，尝试查找
          if [ ! -f "$MAKEFILE_PATH" ]; then
            echo "指定的Makefile不存在，尝试查找..."
            MAKEFILE_PATH=$(find . -type f -name "Makefile" | grep -E "nikki/Makefile|Makefile" | head -n 1)
            
            if [ -z "$MAKEFILE_PATH" ]; then
              echo "错误: 无法找到Makefile文件"
              exit 1
            fi
          fi
          
          echo "找到Makefile: $MAKEFILE_PATH"
          
          # 提取重要信息
          PKG_BUILD_VERSION=$(grep "PKG_BUILD_VERSION:=" -m 1 "$MAKEFILE_PATH" | cut -d '=' -f2 | tr -d ' ')
          PKG_SOURCE_DATE=$(grep "PKG_SOURCE_DATE:=" -m 1 "$MAKEFILE_PATH" | cut -d '=' -f2 | tr -d ' ')
          PKG_NAME=$(grep "PKG_NAME:=" -m 1 "$MAKEFILE_PATH" | cut -d '=' -f2 | tr -d ' ')
          PKG_VERSION=$(grep "PKG_SOURCE_VERSION:=" -m 1 "$MAKEFILE_PATH" | cut -d '=' -f2 | tr -d ' ' | cut -c 1-8)
          
          echo "PKG_NAME: $PKG_NAME"
          echo "PKG_VERSION: $PKG_VERSION"
          
          # 如果无法提取版本，使用默认值
          if [ -z "$PKG_BUILD_VERSION" ]; then
            PKG_BUILD_VERSION="1.0.0"
            echo "无法从Makefile提取版本，使用默认值: $PKG_BUILD_VERSION"
          else
            echo "提取的版本号: $PKG_BUILD_VERSION"
          fi
          
          if [ -z "$PKG_SOURCE_DATE" ]; then
            PKG_SOURCE_DATE=$(date +%Y-%m-%d)
            echo "无法从Makefile提取日期，使用当前日期: $PKG_SOURCE_DATE"
          else
            echo "提取的日期: $PKG_SOURCE_DATE"
          fi
          
          # 保存提取的信息供后续步骤使用
          echo "build_version=$PKG_BUILD_VERSION" >> $GITHUB_OUTPUT
          echo "source_date=$PKG_SOURCE_DATE" >> $GITHUB_OUTPUT
          echo "pkg_version=$PKG_VERSION" >> $GITHUB_OUTPUT
          echo "pkg_name=$PKG_NAME" >> $GITHUB_OUTPUT
          
          # 设置标签名
          TAG_NAME="Nikki-$PKG_BUILD_VERSION"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # 检查标签是否已存在
          if ! git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
            # 创建并推送标签
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
            echo "创建并推送新标签: $TAG_NAME"
          else
            echo "标签 $TAG_NAME 已存在，跳过创建"
          fi

      - name: build
        uses: openwrt/gh-action-sdk@main
        env:
          ARCH: ${{ matrix.arch }}-${{ matrix.branch }}
          FEEDNAME: nikki
          PACKAGES: "luci-app-nikki"
          INDEX: 0
          NO_REFRESH_CHECK: true
          BUILD_LOG: "V=sc"
          BUILD_OPTS: "-j$(nproc) --force-depends"
          IGNORE_ERRORS: "1"
          IGNORE_DEPS: "1"
          EXTRA_PKGS: "libc ca-bundle curl yq firewall4 ip-full kmod-inet-diag kmod-nft-socket kmod-nft-tproxy kmod-tun luci-base"

      - name: prepare release files
        id: prepare
        run: |
          # 创建发布目录
          mkdir -p release_files
          
          # 只查找nikki包的ipk文件
          NIKKI_IPK=$(find bin/packages/ -name "nikki_*.ipk" -type f | head -n 1)
          if [ -n "$NIKKI_IPK" ]; then
            # 使用Makefile中的版本号（带v前缀）
            BUILD_VERSION="${{ steps.version.outputs.build_version }}"
            OPENWRT_VERSION="${{ matrix.branch }}"
            
            # 创建自定义命名的文件 - 新格式: nikki-{版本号}-{架构}-{openwrt系统}.ipk
            NIKKI_VERSION="nikki-v${BUILD_VERSION}-${{ matrix.arch }}-${OPENWRT_VERSION}.ipk"
            cp "$NIKKI_IPK" "release_files/$NIKKI_VERSION"
            echo "创建了自定义命名的IPK文件: $NIKKI_VERSION"
            echo "nikki_file=$NIKKI_VERSION" >> $GITHUB_OUTPUT
            
            # 也复制原始nikki包到发布目录（仅用于调试）
            FILENAME=$(basename "$NIKKI_IPK")
            cp "$NIKKI_IPK" "release_files/original-$FILENAME"
            echo "复制原始nikki包: $NIKKI_IPK"
          else
            echo "错误: 找不到nikki IPK文件!"
            echo "搜索bin/packages/目录的所有IPK文件:"
            find bin/packages/ -type f -name "*.ipk" | sort
            exit 1
          fi
          
          # 将nikki包复制到以架构命名的子目录
          mkdir -p "release_files_${{ matrix.arch }}"
          cp release_files/*.ipk "release_files_${{ matrix.arch }}/"
          
          # 列出准备好的文件
          echo "发布文件列表:"
          ls -la release_files/

      - name: release
        uses: softprops/action-gh-release@v2
        with:
          name: 'Nikki v${{ steps.version.outputs.build_version }}'
          tag_name: latest
          files: |
            release_files/*.ipk

      - name: upload artifacts by arch
        uses: actions/upload-artifact@v4
        with:
          name: nikki-ipk-${{ matrix.arch }}
          path: release_files_${{ matrix.arch }}/*.ipk
          if-no-files-found: warn

  feed:
    needs: release
    name: feed
    runs-on: ubuntu-latest

    steps:
      - name: download
        uses: actions/download-artifact@v4
        with:
          pattern: nikki-ipk-*
          merge-multiple: true
          path: ./downloaded_ipks
      
      - name: prepare feed
        run: |
          mkdir -p public
          cp -r downloaded_ipks/* public/
          ls -la public/
      
      - name: feed
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          force_orphan: true
          commit_message: "release: Nikki v${{ steps.version.outputs.build_version }}"
