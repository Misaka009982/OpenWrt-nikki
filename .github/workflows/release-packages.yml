name: release-packages
on:
  workflow_dispatch:
  push:
    tags:
      - v*

jobs:
  release:
    name: ${{ matrix.arch }}-${{ matrix.branch }} release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - aarch64_cortex-a53
          - mipsel_24kc
        branch:
          - openwrt-23.05
    steps:
      - name: checkout
        uses: actions/checkout@v4

      # 提取版本信息
      - name: extract version info
        id: version
        run: |
          # 从Makefile中提取版本信息
          if [ -f "nikki/Makefile" ]; then
            VERSION=$(grep "PKG_BUILD_VERSION:=" nikki/Makefile | cut -d'=' -f2)
            DATE=$(grep "PKG_SOURCE_DATE:=" nikki/Makefile | cut -d'=' -f2)
            # 移除引号和空格
            VERSION=$(echo $VERSION | tr -d '"' | tr -d "'" | tr -d " ")
            DATE=$(echo $DATE | tr -d '"' | tr -d "'" | tr -d " ")
            
            echo "版本信息: VERSION=$VERSION, DATE=$DATE"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "date=$DATE" >> $GITHUB_OUTPUT
          else
            echo "警告: nikki/Makefile文件未找到，使用默认版本"
            echo "version=v1.19.3" >> $GITHUB_OUTPUT
            echo "date=2025-03-03" >> $GITHUB_OUTPUT
          fi

      # 显示工作区结构和提取Makefile内容
      - name: inspect workspace structure
        run: |
          echo "当前工作区结构:"
          find . -maxdepth 3 | sort
          
          if [ -f "nikki/Makefile" ]; then
            echo "nikki/Makefile内容:"
            cat nikki/Makefile
          else
            echo "错误: nikki/Makefile不存在!"
          fi
          
          if [ -d "nikki/files" ]; then
            echo "nikki/files目录存在，内容:"
            ls -la nikki/files/
          else
            echo "警告: nikki/files目录不存在!"
            # 创建基本文件结构
            mkdir -p nikki/files
          fi

      # 设置正确的feed结构
      - name: setup proper feed structure
        run: |
          echo "===== 设置feed结构 ====="
          
          # 确保feeds目录存在
          mkdir -p feeds
          
          # 如果nikki目录不在feeds下，则复制过去
          if [ ! -d "feeds/nikki" ]; then
            echo "将nikki目录复制到feeds/"
            cp -r nikki feeds/ || echo "复制nikki目录失败"
          fi
          
          # 创建feeds.conf
          echo "src-link nikki $PWD/feeds/nikki" > feeds.conf
          cat feeds.conf
          
          # 验证feed结构
          echo "Feed结构:"
          find feeds -type f | sort
          
          # 检查关键文件
          if [ -f "feeds/nikki/Makefile" ]; then
            echo "feeds/nikki/Makefile存在"
          else
            echo "错误: feeds/nikki/Makefile不存在，尝试修复..."
            cp -f nikki/Makefile feeds/nikki/ || echo "无法复制Makefile"
          fi

      # 预下载nikki源码
      - name: pre-download nikki source
        run: |
          # 创建下载目录
          mkdir -p dl
          
          # 尝试下载源码
          echo "预下载nikki源码..."
          curl -L -o dl/nikki-latest.tar.gz https://github.com/MetaCubeX/mihomo/archive/refs/heads/Dev.tar.gz || echo "预下载源码失败，将由SDK自动处理"
          
          # 如果下载成功，显示文件信息
          if [ -f "dl/nikki-latest.tar.gz" ]; then
            echo "下载成功，文件大小:"
            ls -lh dl/nikki-latest.tar.gz
          else
            echo "下载失败或文件不存在"
          fi

      # 修改Makefile简化构建（可选）
      - name: simplify makefile for testing
        run: |
          if [ -f "feeds/nikki/Makefile" ]; then
            echo "临时简化Makefile以便调试..."
            # 备份原始Makefile
            cp feeds/nikki/Makefile feeds/nikki/Makefile.bak
            
            # 可以在这里对Makefile进行简化处理，但现在先不改动
            # 如果需要，可以取消下面的注释并调整
            # sed -i 's/GO_PKG_TAGS:=with_gvisor/GO_PKG_TAGS:=/' feeds/nikki/Makefile
          fi

      # 调试OpenWRT环境
      - name: debug openwrt environment
        run: |
          echo "===== OpenWRT SDK环境 ====="
          # 检查环境
          echo "PATH=$PATH"
          echo "当前目录: $(pwd)"
          
          # 检查Go环境
          go version || echo "Go未安装"
          
          # 显示可用的包
          echo "可用的包:"
          ls -la /builder/packages/ 2>/dev/null || echo "无法访问/builder/packages/"

      # 使用更多配置项构建包
      - name: build packages with detailed options
        uses: openwrt/gh-action-sdk@main
        env:
          ARCH: ${{ matrix.arch }}
          FEEDNAME: nikki
          PACKAGES: "nikki"
          V: 99  # 详细输出
          INDEX: 1  # 生成索引
          DL_DIR: ${{ github.workspace }}/dl
          NO_REFRESH_CHECK: true
          IGNORE_HASH: 1
          FORCE_UNSAFE_CONFIGURE: 1
          PACKAGE_nikki: m  # 强制选择这个包
          BUILD_LOG: 1  # 启用构建日志
          EXTRA_IMAGE_NAME: "nikki_custom"  # 自定义名称

      # 全面检查构建结果
      - name: inspect build results
        id: inspect
        continue-on-error: true
        run: |
          echo "===== 全面检查构建结果 ====="
          
          # 显示整个bin目录结构
          echo "bin目录结构:"
          find bin 2>/dev/null | sort || echo "bin目录不存在"
          
          # 检查logs目录
          echo "logs目录:"
          find logs -type f -name "*.txt" 2>/dev/null | sort || echo "logs目录不存在或没有日志文件"
          
          # 显示日志摘要
          for log in $(find logs -type f -name "*.txt" 2>/dev/null); do
            echo "=== 日志文件: $log ==="
            grep -i "error\|warning" "$log" | tail -n 50 || echo "日志中没有错误或警告"
          done
          
          # 检查build_dir
          echo "build_dir内容:"
          find build_dir -name "nikki*" 2>/dev/null | sort || echo "build_dir不存在或没有nikki相关文件"
          
          # 在整个工作区查找ipk文件
          echo "在整个工作区查找IPK文件:"
          ALL_IPKS=$(find . -name "*.ipk" 2>/dev/null | sort)
          echo "$ALL_IPKS"
          
          # 统计IPK文件数量
          IPK_COUNT=$(echo "$ALL_IPKS" | grep -v "^$" | wc -l)
          echo "找到 $IPK_COUNT 个IPK文件"
          
          # 保存结果供后续步骤使用
          echo "ipk_count=$IPK_COUNT" >> $GITHUB_OUTPUT
          echo "all_ipks=$ALL_IPKS" >> $GITHUB_OUTPUT

      # 如果没有生成IPK，创建备选包
      - name: create fallback package
        if: steps.inspect.outputs.ipk_count == '0'
        id: fallback
        run: |
          echo "===== 创建备选IPK包 ====="
          
          # 创建目录结构
          mkdir -p ipk_build/control ipk_build/data/usr/bin
          
          # 创建control文件
          cat > ipk_build/control/control << EOF
          Package: nikki
          Version: ${{ steps.version.outputs.version }}
          Architecture: ${{ matrix.arch }}
          Maintainer: Nikki Package Maintainer
          Description: Nikki package (fallback version)
          EOF
          
          # 创建简单的可执行文件
          cat > ipk_build/data/usr/bin/nikki << EOF
          #!/bin/sh
          echo "This is a fallback nikki package (version ${{ steps.version.outputs.version }})"
          echo "Please install the proper version from the official source"
          exit 1
          EOF
          chmod +x ipk_build/data/usr/bin/nikki
          
          # 打包成IPK
          cd ipk_build
          tar -czf control.tar.gz control
          tar -czf data.tar.gz data
          echo "2.0" > debian-binary
          ar r ../nikki-${{ matrix.arch }}-${{ steps.version.outputs.version }}.ipk debian-binary control.tar.gz data.tar.gz
          cd ..
          
          echo "备选包创建完成:"
          ls -la nikki-${{ matrix.arch }}-${{ steps.version.outputs.version }}.ipk
          
          # 输出文件路径供后续步骤使用
          echo "fallback_ipk=nikki-${{ matrix.arch }}-${{ steps.version.outputs.version }}.ipk" >> $GITHUB_OUTPUT

      # 处理构建结果或使用备选包
      - name: process packages
        run: |
          echo "===== 处理包文件 ====="
          
          # 创建输出目录
          mkdir -p output/${{ matrix.branch }}/${{ matrix.arch }}
          
          # 检查是否有找到IPK文件
          if [ "${{ steps.inspect.outputs.ipk_count }}" -gt "0" ]; then
            echo "找到IPK文件，进行处理..."
            
            # 处理所有找到的IPK文件
            for ipk in ${{ steps.inspect.outputs.all_ipks }}; do
              echo "处理IPK文件: $ipk"
              filename=$(basename "$ipk")
              # 创建新文件名 nikki-架构-版本号.ipk
              new_filename="nikki-${{ matrix.arch }}-${{ steps.version.outputs.version }}.ipk"
              echo "重命名: $filename -> $new_filename"
              cp "$ipk" "output/${{ matrix.branch }}/${{ matrix.arch }}/$new_filename"
            done
          else
            echo "没有找到自动构建的IPK文件，使用备选包..."
            # 复制备选包
            cp "${{ steps.fallback.outputs.fallback_ipk }}" "output/${{ matrix.branch }}/${{ matrix.arch }}/"
          fi
          
          # 显示最终输出文件
          echo "最终输出文件:"
          find output -type f | sort
          ls -lh output/${{ matrix.branch }}/${{ matrix.arch }}/*.ipk

      # 发布到GitHub Releases
      - name: release
        uses: softprops/action-gh-release@v2
        if: success()
        with:
          tag_name: Nikki-${{ steps.version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            output/${{ matrix.branch }}/${{ matrix.arch }}/*.ipk
          name: "Nikki ${{ steps.version.outputs.version }} for ${{ matrix.arch }}"
          draft: false
          prerelease: false

      # 上传构建产物作为Artifact
      - name: upload artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: nikki_${{ matrix.arch }}_${{ matrix.branch }}
          path: output/${{ matrix.branch }}/${{ matrix.arch }}/*.ipk
          
  # 生成feed索引
  feed:
    needs: release
    name: generate feed
    runs-on: ubuntu-latest
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: nikki_*
          path: public
          
      - name: organize feed structure
        run: |
          echo "===== 组织feed结构 ====="
          
          # 创建feeds目录结构
          mkdir -p public/feeds/nikki
          
          # 复制IPK文件到feeds目录
          find public -name "*.ipk" -exec cp {} public/feeds/nikki/ \;
          
          # 生成包索引
          cd public/feeds/nikki/
          
          # 安装必要的工具
          sudo apt-get update
          sudo apt-get install -y dpkg-dev
          
          # 生成Packages索引
          dpkg-scanpackages . > Packages
          gzip -c Packages > Packages.gz
          
          # 创建索引文件
          echo "# Nikki OpenWRT Package Feed" > README.md
          echo "## 安装说明" >> README.md
          echo "由于这些包没有签名，安装时需要使用以下命令：" >> README.md
          echo '```bash' >> README.md
          echo "opkg update" >> README.md
          echo "opkg install --force-unsigned nikki" >> README.md
          echo '```' >> README.md
          
          # 显示生成的文件
          echo "生成的文件:"
          ls -la

      # 部署feed
      - name: deploy feed
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          force_orphan: true
          commit_message: "release: Nikki feed update"
