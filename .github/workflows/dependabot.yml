name: dependabot

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  get_current_info:
    runs-on: ubuntu-latest
    outputs:
      pkg_version: ${{ steps.info.outputs.pkg_version }}
      pkg_hash: ${{ steps.info.outputs.pkg_hash }}
      pkg_release: ${{ steps.info.outputs.pkg_release }}
    steps:
      - id: checkout
        name: checkout
        uses: actions/checkout@v4
        with:
          repository: Misaka009982/OpenWrt-nikki
          ref: main
          path: OpenWrt-nikki
      - id: info
        name: info
        run: |
          echo "pkg_version=$(grep "PKG_VERSION:=" OpenWrt-nikki/nikki/Makefile | cut -d '=' -f 2)" >> $GITHUB_OUTPUT
          echo "pkg_hash=$(grep "PKG_HASH:=" OpenWrt-nikki/nikki/Makefile | cut -d '=' -f 2)" >> $GITHUB_OUTPUT
          echo "pkg_release=$(grep "PKG_RELEASE:=" OpenWrt-nikki/nikki/Makefile | cut -d '=' -f 2)" >> $GITHUB_OUTPUT
  get_latest_info:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.info.outputs.version }}
      hash: ${{ steps.info.outputs.hash }}
      tag_name: ${{ steps.info.outputs.tag_name }}
      release_date: ${{ steps.info.outputs.release_date }}
    steps:
      - id: fetch_latest_tag
        name: 获取最新标签
        run: |
          # 获取最新标签名（去除版本号前缀的 v）
          LATEST_TAG=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/tags | jq -r '.[0].name')
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "获取到的最新标签: $LATEST_TAG"
          
          # 提取版本号（去掉前缀 'v'）
          VERSION=$(echo $LATEST_TAG | sed 's/^v//')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "版本号: $VERSION"
          
          # 获取发布日期
          RELEASE_INFO=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/tags/$LATEST_TAG)
          RELEASE_DATE=$(echo $RELEASE_INFO | jq -r '.published_at' | cut -d'T' -f1)
          echo "RELEASE_DATE=$RELEASE_DATE" >> $GITHUB_ENV
          echo "发布日期: $RELEASE_DATE"
      
      - id: compute_hash
        name: 计算哈希值
        run: |
          # 构建源代码包下载 URL
          DOWNLOAD_URL="https://codeload.github.com/metacubex/mihomo/tar.gz/v${VERSION}?"
          echo "源代码包下载 URL: $DOWNLOAD_URL"
          
          # 下载源代码包
          curl -L -o "mihomo-${VERSION}.tar.gz" "$DOWNLOAD_URL"
          
          # 计算哈希值
          PKG_HASH=$(sha256sum "mihomo-${VERSION}.tar.gz" | cut -d ' ' -f 1)
          echo "源代码包哈希值 (PKG_HASH): $PKG_HASH"
          echo "PKG_HASH=$PKG_HASH" >> $GITHUB_ENV
          
          # 尝试下载预编译二进制文件（仅作为参考）
          echo "========================================="
          echo "尝试下载预编译二进制文件（仅供参考）..."
          
          # 定义要检查的架构
          ARCHS=("arm64" "amd64" "386")
          
          for ARCH in "${ARCHS[@]}"; do
            echo "检查架构: $ARCH"
            # 尝试格式 1: 使用标签名称
            DOWNLOAD_URL="https://github.com/MetaCubeX/mihomo/releases/download/${LATEST_TAG}/mihomo-linux-${ARCH}-${LATEST_TAG}.gz"
            echo "尝试 URL: $DOWNLOAD_URL"
            if curl -s -I "$DOWNLOAD_URL" | grep -q "HTTP/2 200"; then
              echo "找到文件，下载中..."
              curl -L -o "mihomo-${ARCH}.gz" "$DOWNLOAD_URL"
              BIN_CHECKSUM=$(sha256sum "mihomo-${ARCH}.gz" | cut -d ' ' -f 1)
              echo "${ARCH} 二进制文件校验和: $BIN_CHECKSUM"
            else
              echo "未找到 ${ARCH} 的预编译文件"
            fi
          done
          
          echo "========================================="
      
      - id: info
        name: 输出信息
        run: |
          echo "version=${{ env.VERSION }}" >> $GITHUB_OUTPUT
          echo "hash=${{ env.PKG_HASH }}" >> $GITHUB_OUTPUT
          echo "tag_name=${{ env.LATEST_TAG }}" >> $GITHUB_OUTPUT
          echo "release_date=${{ env.RELEASE_DATE }}" >> $GITHUB_OUTPUT
  update:
    needs:
      - get_current_info
      - get_latest_info
    if: ${{ needs.get_current_info.outputs.pkg_version != needs.get_latest_info.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: checkout
        uses: actions/checkout@v4
        with:
          repository: Misaka009982/OpenWrt-nikki
          ref: main
          path: OpenWrt-nikki
          fetch-depth: 0
          token: ${{ github.token }}
          
      - id: git_config
        name: 配置 Git
        run: |
          cd OpenWrt-nikki
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch --all
          git branch -a
          
      - id: verify_hash
        name: 验证哈希值
        run: |
          # 检查是否有哈希值
          if [ -z "${{ needs.get_latest_info.outputs.hash }}" ]; then
            echo "警告：未获取到哈希值，将中止更新"
            exit 1
          else
            echo "获取到哈希值: ${{ needs.get_latest_info.outputs.hash }}"
            echo "HASH=${{ needs.get_latest_info.outputs.hash }}" >> $GITHUB_ENV
            echo "VERSION=${{ needs.get_latest_info.outputs.version }}" >> $GITHUB_ENV
            echo "RELEASE_DATE=${{ needs.get_latest_info.outputs.release_date }}" >> $GITHUB_ENV
          fi
          
      - id: update
        name: update
        run: |
          # 更新 Makefile 中的版本号和哈希值
          sed -i "s/PKG_VERSION:=.*/PKG_VERSION:=${{ env.VERSION }}/" OpenWrt-nikki/nikki/Makefile
          sed -i "s/PKG_RELEASE:=.*/PKG_RELEASE:=1/" OpenWrt-nikki/nikki/Makefile
          sed -i "s/PKG_HASH:=.*/PKG_HASH:=${{ env.HASH }}/" OpenWrt-nikki/nikki/Makefile
          
      - id: create_pr
        name: 创建 PR
        run: |
          cd OpenWrt-nikki
          git checkout -b dependabot
          git add nikki/Makefile
          git commit -m "build: update mihomo to v${{ env.VERSION }}"
          git push --force origin dependabot
          
          # 使用 GitHub CLI 创建 PR
          gh pr create --title "build: update mihomo to v${{ env.VERSION }}" \
                       --body "将 mihomo 更新到最新版本: v${{ env.VERSION }}
          
          发布日期: ${{ env.RELEASE_DATE }}
          源代码包哈希值: ${{ env.HASH }}
          
          [发布详情](https://github.com/metacubex/mihomo/releases/tag/v${{ env.VERSION }})" \
                       --base main
        env:
          GITHUB_TOKEN: ${{ github.token }}
